<?php
namespace app\models;

use app\models\base\BaseModel;
use Yii;
use app\config\Vhelper;
class PurchaseCompact extends BaseModel
{
    public $orders;

    public static function tableName()
    {
        return '{{%purchase_compact}}';
    }

    public function formName()
    {
        return ''; // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [[
                'j_company_name',
                'j_address',
                'j_linkman',
                'j_phone',
                'y_company_name',
                'y_address',
                'y_linkman',
                'y_phone',
                'ship_method',
                'shouhuo_address',
                'payment_explain',
                'hezuo_reqiure',
                'huikuan_information',
                'heyue_require',
                'zhijian_require',
                'settlement_ratio',
                'product_money',
                'real_money',
            ], 'required'],

            [[
                'compact_number',
                'supplier_name',
                'supplier_code',
                'source',
                'note_freight',
                'note_other',
                'compact_status',
                'payment_status',
                'refund_status',
                'create_time',
                'create_person_name',
                'create_person_id',
                'audit_time',
                'audit_person_name',
                'audit_person_id',
                'audit_note',
                'payment_time',
                'payment_person_name',
                'payment_person_id',
                'payment_note',
                'dj_money',
                'wk_money',
                'wk_total_money',
                'freight',
                'discount',
                'tpl_id',
                'is_drawback',
                'y_corporate',
                'j_email',
                'y_email',
                'baozhuang_require',
                'shouhou_clause',
                'buchong_clause',
                'djhuo_require',
            ], 'safe']

        ];
    }

    public function attributeLabels()
    {
        return [
            'compact_number' => '合同编号',
            'source' => '采购来源',
            'j_company_name' => '甲方公司名称',
            'j_address' => '甲方地址',
            'j_linkman' => '甲方联系人',
            'j_phone' => '甲方电话',
            'y_company_name' => '乙方公司名称',
            'y_address' => '乙方地址',
            'y_linkman' => '乙方联系人',
            'y_phone' => '乙方电话',
            'ship_method' => '运输方式',
            'shouhuo_address' => '收货地址',
            'payment_explain' => '付款说明',
            'hezuo_reqiure' => '合作要求',
            'huikuan_information' => '汇款信息',
            'heyue_require' => '合约要求',
            'zhijian_require' => '质检要求',
            'settlement_ratio' => '支付比例',
            'product_money' => '合同总商品金额',
            'freight' => '合同总运费',
            'discount' => '合同总优惠额',
            'real_money' => '合同实际总额',
        ];
    }

    public function getPurchaseCompactItems()
    {
        return $this->hasMany(PurchaseCompactItems::className(), ['compact_number' => 'compact_number'])->where(['bind' => 1]);
    }

    public function getPurchaseCompactPay()
    {
        return $this->hasMany(PurchaseOrderPay::className(), ['pur_number' => 'compact_number']);
    }

    public static function getPurNumbers($compact_number)
    {
        if (!is_array($compact_number)) {
            $compact_number = [$compact_number];
        }
        $pos = PurchaseCompactItems::find()
            ->select('pur_number')
            ->where(['in','compact_number',$compact_number])
            ->andwhere(['bind'=>1])
            ->column();
        return $pos;
    }

    // download compact payform
    public static function downloadCompactPayForm($control, $model)
    {
        $cpn = $model->compact_number;
        $models = PurchasePayForm::find()->where(['compact_number' => $cpn])->one();
        if(empty($data)) {
            return null;
        }
        foreach($models as $model) {
            $tpl = Template::findOne($data->tpl_id);
            $tplPath = $tpl->style_code;
            $content = $control->renderPartial("//template/tpls/{$tplPath}", ['model' => $model, 'print' => true]);
            self::output($content, $cpn, $model->id);
        }
        $dir = Yii::getAlias('@runtime/pdf/'.$cpn);
        return $dir;
    }

    // compress dir
    public static function compressDir($dir, $zip, $prev='.')
    {
        $handler = opendir($dir);
        $basename = basename($dir);
        $zip->addEmptyDir($prev . '/' . $basename);
        while($file = readdir($handler)) {
            $realpath = $dir . '/' . $file;
            if(is_dir($realpath)) {
                if($file !== '.' && $file !== '..') {
                    $zip->addEmptyDir($prev . '/' . $basename . '/' . $file);
                    self::compressDir($realpath, $zip, $prev . '/' . $basename);
                }
            } else {
                $zip->addFile($realpath, $prev. '/' . $basename . '/' . $file);
            }
        }
        closedir($handler);
        return null;
    }

    public static function output($content, $cpn, $filename=null)
    {
        $mpdf = new \mPDF();
        $mpdf->autoScriptToLang = 1;
        $mpdf->autoLangToFont = 1;
        $mpdf->SetDisplayMode(100);

        //设置PDF页脚内容
        $footer='<table width="100%" style=" vertical-align: bottom; font-family:
        serif; font-size: 9pt; color: #000088;"><tr style="height:30px"></tr><tr>
        <td width="100%" align="center" style="font-size:12px;color:#A0A0A0">第{PAGENO}页/共{nb}页</td>
        </tr></table>';
         
        //添加页脚到pdf中
        $mpdf->SetHTMLFooter($footer);

        // 不要显示水印
        /*$mpdf->watermark_font = 'GB';
        $mpdf->SetWatermarkText('易佰网络科技',0.1);
        $mpdf->showWatermarkText = true;
        $mpdf->shrink_tables_to_fit = 1;*/

        if(is_null($filename)) {
            $file = $cpn.'.pdf';
        } else {
            $file = $filename.'.pdf';
        }
        $css = './css/mypdf.css';
        $style = file_get_contents($css);
        $mpdf->WriteHTML($style, 1);
        $mpdf->WriteHTML($content, 2);
        $mpdf->Output($file,'d');
    }

    public static function getPayFormContent($pay_id)
    {
        $model = PurchasePayForm::find()->where(['pay_id' => $pay_id])->one();
        if(empty($model)) {
            return null;
        }
        $tpl = Template::findOne($model->tpl_id);
        $tplPath = $tpl->style_code;
        return [
            'tpl' => "//template/tpls/{$tplPath}",
            'data' => ['model' => $model, 'print' => true]
        ];
    }

    /**
     * 得到合同支付计划（最高3段）
     * $param obj $is_drawback 是否含税（默认不含税）1不含税 2含税
     * @param string $ratio 合同的结算比例 '30%+30%+40%'
     * @param float $productMoney 合同的总产品额
     * @param float $freight 合同的总运费
     * @param float $discount 合同的总优惠额
     * @param int $is_drawback 是否退税（默认不退税）
     * @return array 返回订金，中款，尾款信息
     */
    public static function PaymentPlan3($ratio, $productMoney, $freight, $discount, $is_drawback = 1)
    {
        $_ratio = explode('+', $ratio);
        $dj = 0;
        $wk = 0;
        $wwk = 0;

        if($is_drawback == 2) { // 含税（对公）
            if(count($_ratio) > 1) {
                if(count($_ratio) == 2) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount;  // 订金 = 产品总额*首款百分比-优惠
                    $wk = ($productMoney*(int)$wkRatio)/100; // 尾款
                    $wwk = $wk;
                } else if(count($_ratio) == 3) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $wwkRatio = 100-(int)$djRatio-(int)$wkRatio;
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount; // 订金除去优惠额
                    $wk = ($productMoney*(int)$wkRatio)/100;   // 中款
                    $wwk = ($productMoney*(int)$wwkRatio)/100; // 尾款
                } else if(count($_ratio) > 3) {
                    exit('目前暂不支持大于3次的结算比例');
                }
            }
        } else { // 不含税（对私）
            if(count($_ratio) > 1) {
                if(count($_ratio) == 2) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount;  // 订金 = 产品总额*首款百分比-优惠
                    $wk = ($productMoney*(int)$wkRatio)/100;   // 尾款 = 产品总额*尾款百分比
                    $wwk = $wk + $freight; // 尾款总额 = 产品总额*尾款百分比 + 运费
                } else if(count($_ratio) == 3) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $wwkRatio = 100-(int)$djRatio-(int)$wkRatio;
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount; // 订金除去优惠额
                    $wk = ($productMoney*(int)$wkRatio)/100; // 中款不含运费与优惠
                    $wwk = ($productMoney*(int)$wwkRatio)/100 + $freight; // 尾款含运费
                } else if(count($_ratio) > 3) {
                    exit('目前暂不支持大于3次的结算比例');
                }
            }
        }
        return [
            'dj' => $dj,
            'wk' => $wk,
            'wwk' => $wwk
        ];
    }


    /**
     * 得到合同请款选项列表（最高3段）
     * @param obj $model 合同模型
     * @return array 返回选项列表
     */
    public static function PaymentSelect3($model)
    {
        if(empty($model->settlement_ratio)) {
            return false;
        }
        $js_ratio = explode('+', $model->settlement_ratio);
        $select_ratio = [];
        if(count($js_ratio) == 1) {
            $select_ratio[] = ['ratio' => $js_ratio[0], 'money' => $model->real_money, 'pay_category' => 11];
        } else if(count($js_ratio) == 2) {
            $select_ratio[] = ['ratio' => $js_ratio[0], 'money' => $model->dj_money, 'pay_category' => 12];
            $select_ratio[] = ['ratio' => $js_ratio[1], 'money' => $model->wk_total_money, 'pay_category' => 20];
        } else if(count($js_ratio) == 3) {
            $select_ratio[] = ['ratio' => $js_ratio[0], 'money' => $model->dj_money, 'pay_category' => 12];
            $select_ratio[] = ['ratio' => $js_ratio[1], 'money' => $model->wk_money, 'pay_category' => 13];
            $select_ratio[] = ['ratio' => $js_ratio[2], 'money' => $model->wk_total_money, 'pay_category' => 20];
        } else if(count($js_ratio) > 3) {
            exit('目前暂不支持大于3次的结算比例');
        }
        // 含税的合同，加上运费选择列，可以直接请运费
        if($model->is_drawback == 2) {
            $select_ratio[] = ['ratio' => '运费', 'money' => $model->freight, 'pay_category' => 10];
        }
        return $select_ratio;
    }

    /**
     * 检测采购单是否存在绑定关系
     */
    public static function is_bind($opn)
    {
        $has = self::find()
            ->from('pur_purchase_compact_items')
            ->where(['pur_number' => $opn, 'bind' => 1])->one();
        if(empty($has)) {
            return false;
        } else {
            return $has->compact_number;
        }
    }
    /**
     * fba-计算定金和尾款和尾款总额
     * $param obj $is_drawback 是否含税（默认不含税）1不含税 2含税
     * @param string $ratio 合同的结算比例 '30%+30%+40%'
     * @param float $productMoney 合同的总产品额
     * @param float $freight 合同的总运费
     * @param float $discount 合同的总优惠额
     * @param int $is_drawback 是否退税（默认不退税）
     * @return array 返回订金，中款，尾款信息
     */
    public static function FbaPaymentPlan($ratio, $productMoney, $freight, $discount, $is_drawback = 1)
    {
        $_ratio = explode('+', $ratio);
        $dj = 0;
        $wk = 0;
        $wwk = 0;

        if($is_drawback == 2) { // 含税（对公）
            if(count($_ratio) > 1) {
                if(count($_ratio) == 2) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount;  // 订金 = 产品总额*首款百分比-优惠
                    $wk = ($productMoney*(int)$wkRatio)/100; // 尾款
                    $wwk = $wk;
                } else if(count($_ratio) == 3) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    $wwkRatio = 100-(int)$djRatio-(int)$wkRatio;
                    $dj = ($productMoney*(int)$djRatio)/100 - $discount; // 订金除去优惠额
                    $wk = ($productMoney*(int)$wkRatio)/100;   // 中款
                    $wwk = ($productMoney*(int)$wwkRatio)/100; // 尾款
                } else if(count($_ratio) > 3) {
                    exit('目前暂不支持大于3次的结算比例');
                }
            }
        } else { // 不含税（对私）
            if(count($_ratio) > 0) {
                if(count($_ratio) == 2) {
                    $djRatio = $_ratio[0];
                    $wkRatio = $_ratio[1];
                    //定金、尾款根据系统的比例及填写自动带出
                    $dj = ($productMoney*(int)$djRatio)/100;  // 订金 = 产品总额*首款百分比
                    $wk = ($productMoney*(int)$wkRatio)/100;   // 尾款 = 产品总额*尾款百分比
                    $wwk = $wk + $freight - $discount; // 尾款总额=尾款+运费-优惠
                // } else if(count($_ratio) == 3) {
                    // $djRatio = $_ratio[0];
                    // $wkRatio = $_ratio[1];
                    // $wwkRatio = 100-(int)$djRatio-(int)$wkRatio;

                    // $dj = ($productMoney*(int)$djRatio)/100 - $discount; // 订金除去优惠额
                    // $wk = ($productMoney*(int)$wkRatio)/100; // 中款不含运费与优惠
                    // $wwk = ($productMoney*(int)$wwkRatio)/100 + $freight; // 尾款含运费
                } else if(count($_ratio) > 2) {
                    exit('目前暂不支持大于2次的结算比例');
                }
            }
        }
        return [
            'dj' => $dj,
            'wk' => $wk,
            'wwk' => $wwk
        ];
    }
















    
    /**
     * 获取订金，中款，尾款
     */
    public static function getCompactPayPrice($compact_number)
    {
        $select_ratio = [];
        $dj_money = $zk_money = $wk_money = 0;
        $compactInfo = PurchaseCompact::find()->select('settlement_ratio, product_money, freight, is_drawback')->where(['compact_number'=>$compact_number])->asArray()->one();
        $compactItemsInfo = PurchaseCompactItems::find()->select('pur_number')->where(['compact_number'=>$compact_number, 'bind'=>1])->asArray()->all();

        $pur_numbers = array_column($compactItemsInfo, 'pur_number');
//        $no_cancel_price = PurchaseOrderItems::find()->where(['in', 'pur_number', $pur_numbers])->andWhere(['is_cancel'=>2])->all(); //有效sku总额

        $no_cancel_price = 0;
        $orderItemsInfo = PurchaseOrderItems::find()->where(['in', 'pur_number', $pur_numbers])->andWhere(['is_cancel'=>2])->asArray()->all(); //有效sku总额
        foreach ($orderItemsInfo as $k=>$v) {
            $itemsPrice = PurchaseOrderItems::getItemsPrice($v['pur_number']);
            $price = $itemsPrice[$v['sku']]['price'];
            $no_cancel_price += $price*$v['ctq'];
        }

        $order_price = 0;
        $order_price_data = PurchaseOrderItems::find()->where(['in', 'pur_number', $pur_numbers])->asArray()->all(); //原采购总额
        foreach ($order_price_data as $k=>$v) {
            $itemsPrice = PurchaseOrderItems::getItemsPrice($v['pur_number']);
            $price = $itemsPrice[$v['sku']]['price'];
            $order_price += $price*$v['ctq'];
        }



//        $no_cancel_price = PurchaseOrderItems::find()->where(['in', 'pur_number', $pur_numbers])->andWhere(['is_cancel'=>2])->sum('price*ctq'); //有效sku总额
//        $order_price = PurchaseOrderItems::find()->where(['in', 'pur_number', $pur_numbers])->sum('price*ctq'); //原采购总额

        $_ratio = explode('+', $compactInfo['settlement_ratio']); //比例
        $count = count($_ratio);
        
        foreach ($_ratio as $k => $v) {
            $ratio = (int)$v;
            if ($count == $k+1) {
                # 尾款
                $wk_money = $no_cancel_price - $dj_money - $zk_money;
                $select_ratio[] = ['ratio' => $v, 'money' => $wk_money, 'pay_category' => 20];
            } else {
                if ($k == 0) {
                    # 订金
                    $dj_money = sprintf("%.3f", $no_cancel_price*$ratio/100);
                    $select_ratio[] = ['ratio' => $v, 'money' => $dj_money, 'pay_category' => 12];
                } else {
                    # 中款
                    $zk_money = sprintf("%.3f", $no_cancel_price*$ratio/100);
                    $select_ratio[] = ['ratio' => $v, 'money' => $zk_money, 'pay_category' => 13];
                }
            }
        }

        // 含税的合同，加上运费选择列，可以直接请运费
        if($compactInfo['is_drawback'] == 2) {
            $select_ratio[] = ['ratio' => '运费', 'money' => $compactInfo['freight'], 'pay_category' => 10];
        }

        return $select_ratio;
    }
    /**
     * 获取合同的金额集合：合同总金额，取消金额，作废金额，已付款金额，退款金额
     */
    public static function getCompactPriceGather($compact_number=false,$pur_number=false)
    {
        $compactTotalPrice = PurchaseCompact::getCompactTotalPrice($compact_number,$pur_number); //合同总金额
        $compactCancelPrice = PurchaseCompact::getCompactCancelPrice($compact_number,$pur_number); //合同取消(作废)总金额
        $compactReceiptPrice = PurchaseCompact::getCompactReceiptPrice($compact_number, $pur_number); //合同总退款额+当前退款额
        $compactPayPrice = PurchaseCompact::getCompactPayTotalPrice($compact_number, $pur_number); //获取总付款额
        return ['compact_total_price'=>$compactTotalPrice, 'compact_cancel_price'=>$compactCancelPrice, 'compact_receipt_price'=>$compactReceiptPrice, 'compact_pay_price'=>$compactPayPrice];

    }
    /**
     * 获取合同的总金额：如果是含税的，就是含税金额
     */
    public static function getCompactTotalPrice($compact_number=false,$pur_number=false)
    {
        $where = [];
        $return_res = 0;
        if ($compact_number) {
            $where['compact_number'] = $compact_number;
        } elseif($pur_number) {
            $where['pur_number'] = $pur_number;
        }

        $compactItemsInfo = PurchaseCompactItems::find()->select('pur_number')->where(['bind'=>1])->andWhere($where)->asArray()->all();
        $pur_numbers = array_column($compactItemsInfo, 'pur_number');

        $cancelInfo = PurchaseOrderCancel::find()->joinWith('purchaseOrderCancelSub')->where(['in', 'pur_purchase_order_cancel.pur_number', $pur_numbers])->andWhere(['audit_status'=>2])->asArray()->all();
        $cancelSubInfo = array_column($cancelInfo, 'purchaseOrderCancelSub');
        foreach ($pur_numbers as $k => $v) {
            $itemsPriceInfo = PurchaseOrderItems::getItemsPrice($v);
            foreach ($itemsPriceInfo as $ik => $iv) {
                //如果采购数量为零，则取取消里面的数量
                if (empty($iv['ctq'])) {
                    foreach ($cancelSubInfo as $sk => $sv) {
                        if (empty($sv)) continue;
                        foreach ($sv as $ssv) {
                            if ($ssv['sku']==$iv['sku']) {
                                $iv['ctq'] += $ssv['cancel_ctq'];
                            }
                        }
                    }
                }
                $return_res += $iv['price']*$iv['ctq'];
            }
        }
        return $return_res;
    }
    /**
     * 获取合同的取消总金额：如果是含税的，就是含税金额
     */
    public static function getCompactCancelPrice($compact_number=false,$pur_number=false)
    {
        $where = [];
        $return_res = 0;
        if ($compact_number) {
            $where['compact_number'] = $compact_number;
        } elseif($pur_number) {
            $where['pur_number'] = $pur_number;
        }

        $compactItemsInfo = PurchaseCompactItems::find()->select('pur_number')->where(['bind'=>1])->andWhere($where)->asArray()->all();
        $pur_numbers = array_column($compactItemsInfo, 'pur_number');
        $cancelInfo = PurchaseOrderCancel::find()->joinWith('purchaseOrderCancelSub')->where(['in', 'pur_purchase_order_cancel.pur_number', $pur_numbers])->andWhere(['audit_status'=>2])->asArray()->all();
        $cancelSubInfo = array_column($cancelInfo, 'purchaseOrderCancelSub');
        if (!empty($cancelSubInfo)) {
            foreach ($cancelSubInfo as $sk => $sv) {
                foreach ($sv as $k => $v) {
                    $itemsPriceInfo = PurchaseOrderItems::getItemsPrice($v['pur_number'],$v['sku']);
                    $return_res += $itemsPriceInfo['price']*$v['cancel_ctq'];
                }
            }
        }
        return $return_res;
    }
    /**
     * 获取合同总退款额+当前退款额
     * $is_current 是否加上当前退款额（待收款）
     */
    public static function getCompactReceiptPrice($compact_number=false,$pur_number=false, $is_current=true)
    {
        $where = [];
        $return_res = 0;
        if ($compact_number) {
            $where['compact_number'] = $compact_number;
        } elseif($pur_number) {
            $where['pur_number'] = $pur_number;
        }

            // '1' 待收款
            // '2' 已收款
            // '3' 部分退款
            // '4' 全额退款
        if ($is_current) {
            $andWhere = ['in', 'pay_status', [1, 2]];
        } else {
            $andWhere['pay_status'] = 2;
        }

        $compactItemsInfo = PurchaseCompactItems::find()->select('pur_number')->where(['bind'=>1])->andWhere($where)->asArray()->all();
        $pur_numbers = array_column($compactItemsInfo, 'pur_number');
        $receipt_price = PurchaseOrderReceipt::find()->where(['in', 'pur_number', $pur_numbers])->andWhere($andWhere)->sum('pay_price');
        $return_res = $receipt_price?:0;
        return $return_res;
    }
    /**
     * 获取合同总付款总额：
     */
    public static function getCompactPayTotalPrice($compact_number=false,$pur_number=false)
    {
        $where = [];
        $return_res = 0;
        if ($compact_number) {
            $where['compact_number'] = $compact_number;
        } elseif($pur_number) {
            $where['pur_number'] = $pur_number;
        }

        // '5'  => '已付款',
        // '6'  => '已部分付款',
        $andWhere = ['in', 'pay_status', [5, 6]];
        $compactItemsInfo = PurchaseCompactItems::find()->select('pur_number,compact_number')->where(['bind'=>1])->andWhere($where)->asArray()->one();
        $compact_number = $compactItemsInfo['compact_number'];
        $orderPayInfo = PurchaseOrderPay::find()->where(['pur_number'=>$compact_number])->andWhere($andWhere)->asArray()->sum('pay_price');
        $return_res = $orderPayInfo?:0;
        return $return_res;
    }

}
