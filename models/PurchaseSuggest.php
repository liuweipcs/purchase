<?php

namespace app\models;

use app\models\base\BaseModel;

use app\config\Vhelper;
use app\services\PurchaseSuggestQuantityServices;
use app\services\SupplierServices;
use Yii;
use yii\db\Exception;

/**
 * This is the model class for table "pur_purchase_suggest".
 *
 * @property string $id
 * @property string $warehouse_code
 * @property string $warehouse_name
 * @property string $sku
 * @property string $name
 * @property string $supplier_code
 * @property string $supplier_name
 * @property string $buyer
 * @property string $replenish_type
 * @property string $qty
 * @property string $price
 * @property string $currency
 * @property integer $payment_method
 * @property integer $supplier_settlement
 * @property string $ship_method
 * @property string $is_purchase
 * @property string $created_at
 * @property string $creator
 * @property string $product_category_id
 * @property string $category_cn_name
 * @property string $on_way_stock
 * @property string $available_stock
 * @property string $stock
 * @property integer $left_stock
 * @property string $days_sales_3
 * @property string $days_sales_7
 * @property string $days_sales_15
 * @property string $days_sales_30
 * @property string $sales_avg
 * @property string $type
 */
class PurchaseSuggest extends BaseModel
{
    public $num_qty;//建议采购量 
    public $num_sku;//建议采购SKU数 
    public $money;//预计采购金额
    public $left;
    public $page_size;
    public $xcx_pur_number;
    public $create_time;
    public $sales_import;
    public $product_cost;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'pur_purchase_suggest';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['warehouse_code', 'warehouse_name', 'sku', 'name', 'supplier_code', 'supplier_name', 'buyer', 'replenish_type', 'currency', 'payment_method', 'supplier_settlement', 'ship_method', 'created_at', 'creator', 'product_category_id', 'category_cn_name', 'type','buyer_id'], 'required'],
            [['qty', 'payment_method', 'supplier_settlement', 'product_category_id', 'on_way_stock', 'available_stock', 'stock', 'left_stock', 'days_sales_3', 'days_sales_7', 'days_sales_15', 'days_sales_30', 'sales_avg', 'ship_method', 'replenish_type','buyer_id','state'], 'integer'],
            [['price'], 'number'],
            [['is_purchase', 'type'], 'string'],
            [['created_at','transit_code','purchase_type','demand_number','product_status','qty_13'], 'safe'],
            [['warehouse_code', 'sku', 'supplier_code', 'buyer'], 'string', 'max' => 30],
            [['warehouse_name', 'category_cn_name'], 'string', 'max' => 50],
            [['name'], 'string', 'max' => 300],
            [['supplier_name'], 'string', 'max' => 100],
            [['currency', 'creator'], 'string', 'max' => 20],
        ];
    }
/* 
    public function attributes()
    {
        $attributes =  parent::attributes(); // TODO: Change the autogenerated stub
        $array = ['product_cost'];
        return array_merge($array,$attributes);
    }
     */
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'warehouse_code' => 'Warehouse Code',
            'warehouse_name' => 'Warehouse Name',
            'sku' => 'Sku',
            'name' => 'Name',
            'supplier_code' => 'Supplier Code',
            'supplier_name' => 'Supplier Name',
            'buyer' => 'Buyer',
            'replenish_type' => '补货类型',
            'qty' => 'Qty',
            'price' => 'Price',
            'currency' => 'Currency',
            'payment_method' => 'Payment Method',
            'supplier_settlement' => 'Supplier Settlement',
            'ship_method' => '运输方式',
            'is_purchase' => 'Is Purchase',
            'created_at' => 'Created At',
            'creator' => 'Creator',
            'product_category_id' => 'Product Category ID',
            'category_cn_name' => 'Category Cn Name',
            'on_way_stock' => 'On Way Stock',
            'available_stock' => 'Available Stock',
            'stock' => 'Stock',
            'left_stock' => 'Left Stock',
            'days_sales_3' => 'Days Sales 3',
            'days_sales_7' => 'Days Sales 7',
            'days_sales_15' => 'Days Sales 15',
            'days_sales_30' => 'Days Sales 30',
            'sales_avg' => 'Sales Avg',
            'type' => 'Type',
            'buyer_id' => 'Buyer ID',
            'process_qty'=> '已生成采购单数量',
            'state'=> '处理状态',
            'untreated_time'=> '未处理时间',
        ];
    }
    /**
     * 通过code获取供应商名
     * @param $code
     * @return false|null|string
     */
    public static function  GetCode($code)
    {
        return self::find()->select('supplier_name')->where(['supplier_code'=>$code])->scalar();
    }

    /**
     * 返回采购建议的统计状态数量
     * @param $status
     * @return int|string
     */
    public static function  getStatus($status,$type=null)
    {
        $start_time = date('Y-m-d 00:00:00');
        $end_time   = date('Y-m-d 23:59:59');
        $warehouse_code = PurchaseSuggestQuantityServices::getSuggestWarehouseCode();
        if(empty($type))
        {
           $datas= self::find()->select('id')->where(['product_status'=>$status,'purchase_type'=>1,'state'=>[0,1,2]])->andWhere(['>','qty',0])->andWhere(['in','warehouse_code',$warehouse_code])->andWhere(['between', 'created_at', $start_time, $end_time])->asArray()->all();
           return !empty($datas) ? count(array_column($datas,'id')) : 0;
//            return self::find()->where(['product_status'=>$status,'purchase_type'=>1,'state'=>[0,1,2]])->andWhere(['>','qty',0])->andWhere(['in','warehouse_code',['DG','SZ_AA','xnc','ZDXNC','CDxuni','ZMXNC_WM','ZMXNC_EB','HW_XNC','LAZADA-XNC']])->andWhere(['between', 'created_at', $start_time, $end_time])->groupBy('buyer_id')->count();
        } else{
            $datas =  self::find()->select('id')->where(['purchase_type'=>1,'state'=>[0,1,2]])->andWhere(['in','warehouse_code',$warehouse_code])->andWhere(['>','qty',0])->andWhere(['between', 'created_at', $start_time, $end_time])->asArray()->all();
            $ignoresku = self::find()->select('id')->where(['purchase_type'=>1,'state'=>[0,1,2]])->andWhere(['sku'=>'XJFH0000'])->andWhere(['in','warehouse_code',$warehouse_code])->andWhere(['>','qty',0])->andWhere(['between', 'created_at', $start_time, $end_time])->asArray()->all();
            return !empty($datas) ? count(array_column($datas,'id'))-count($ignoresku) : 0;
            //            return self::find()->where(['purchase_type'=>1,'state'=>[0,1,2]])->andWhere(['in','product_status',['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','100']])->andWhere(['in','warehouse_code',['DG','SZ_AA','xnc','ZDXNC','CDxuni','ZMXNC_WM','ZMXNC_EB','HW_XNC','LAZADA-XNC']])->andWhere(['>','qty',0])->andWhere(['between', 'created_at', $start_time, $end_time])->groupBy('buyer_id')->count();
        }

    }

    /**
     * 返回采购建议的统计状态数量
     * @param $status
     * @return int|string
     */
    public static function getStatusStatistics()
    {
        $statusStatistics = [];
        $start_time = date('Y-m-d 00:00:00');
        $end_time   = date('Y-m-d 23:59:59');
        $warehouse_code = PurchaseSuggestQuantityServices::getSuggestWarehouseCode();
        $query = self::find()->select("product_status, count(1) as count")
        ->where(['purchase_type'=>1,'state'=>[0,1,2]])
        ->andWhere(['>','qty',0])
        ->andWhere(['in','warehouse_code',$warehouse_code])
        ->andWhere(['between', 'created_at', $start_time, $end_time])
        ->groupBy("product_status");
        /**
         * @var $query \yii\db\ActiveQuery
        */
        $sql = $query->createCommand()->getRawSql();
        $sql .= ' ORDER BY NULL';
        $query->sql = $sql;
        $datas = $query->asArray()->all();
        $total = 0;
        if (!empty($datas))
            foreach ($datas as $row)
            {
                $count = (int)$row['count'];
                $statusStatistics[$row['product_status']] = $count;
                $total += $row['count'];
            }
        $statusStatistics['total'] = $total;
        return $statusStatistics;
    }

    /**
     * 返回采购建议的统计状态数量
     * @param $status
     * @return int|string
     */
    public static function getFbaStatusStatistics()
    {
        $statusStatistics = [];
        $start_time = date('Y-m-d 00:00:00');
        $end_time   = date('Y-m-d 23:59:59');
        $warehouse_code = PurchaseSuggestQuantityServices::getFbaSuggestWarehouseCode();
        $query = self::find()->select("product_status, count(1) as count")
            ->where(['purchase_type'=>3,'state'=>[0,1,2]])
            ->andWhere(['>','qty',0])
            ->andWhere(['in','warehouse_code',$warehouse_code])
            ->andWhere(['between', 'created_at', $start_time, $end_time])
            ->groupBy("product_status");
        /**
         * @var $query \yii\db\ActiveQuery
         */
        $sql = $query->createCommand()->getRawSql();
        $sql .= ' ORDER BY NULL';
        $query->sql = $sql;
        $datas = $query->asArray()->all();
        $total = 0;
        if (!empty($datas))
            foreach ($datas as $row)
            {
                $count = (int)$row['count'];
                $statusStatistics[$row['product_status']] = $count;
                $total += $row['count'];
            }
        $statusStatistics['total'] = $total;
        return $statusStatistics;
    }
    
    // 获取可批量生成采购单的采购建议数量
    public static function getLeadSuggests($ids=null)
    {
        $user_id = Yii::$app->user->identity->id;
        $time_from = date('Y-m-d', time()).' 00:00:00';
        $time_to = date('Y-m-d', time()).' 24:00:00';
        $query = self::find();
        $field = [
            'id',
            'warehouse_code',
            'supplier_code',
            'supplier_name',
            'purchase_type',
            'replenish_type',
            'ship_method',
            'currency',
            'payment_method',
            'supplier_settlement',
            'transit_code',
            'GROUP_CONCAT(id) as ids'
        ];
        $condition = [
            //'is_purchase'=>'Y',
            'state' => 0, // 处理状态 未处理
            'buyer_id' => $user_id, // 采购员
    //        'product_status' => 4, // 产品状态
            'purchase_type' => 1, // 采购类型 国内
//            'warehouse_code' => 'SZ_AA'
        ];
        //没勾选加上产品状态
        if(empty($ids)){
            $condition['product_status'] = 4;
        }
        $query->select($field)
            ->from('pur_purchase_suggest')
            ->where($condition)
            ->andWhere(['in','warehouse_code',['SZ_AA','ZDXNC','HW_XNC','LAZADA-XNC']])
            ->andWhere(['>', 'qty', 0])
            ->andWhere(['>', 'created_at', $time_from])
            ->andWhere(['<', 'created_at', $time_to]);
        if(!empty($ids)){
            $query->andWhere(['in', 'id', $ids]);
            $query->groupBy(['supplier_code','warehouse_code']);
        }else{
            $query->groupBy(['supplier_code','warehouse_code']);
        }
        return $query;
    }
    /**
     * 关联未处理备注一对一
     * @return \yii\db\ActiveQuery
     */
    public  function  getPurchaseSuggestNote()
    {
        return $this->hasOne(PurchaseSuggestNote::className(),['sku'=>'sku','warehouse_code'=>'warehouse_code'])
            ->where(['status'=>1])
            ->orderBy('id DESC');
    }
    /**
     * 关联采购单详情表一对多
     * @return \yii\db\ActiveQuery
     */
    public  function  getPurchaseOrderItems()
    {
        return $this->hasMany(PurchaseOrderItems::className(),['sku'=>'sku']);
    }
    /**
     * 关联采购单主表一对多（通过中间表：采购单详情表）
     * @return \yii\db\ActiveQuery
     */
    public  function  getPurchaseOrder()
    {
        return $this->hasMany(PurchaseOrder::className(),['pur_number'=>'pur_number'])->via('purchaseOrderItems');
//        return $this->hasMany(PurchaseOrder::className(),['pur_number'=>'pur_number'])->where(['sku'=>$this->sku])->via('purchaseOrderItems');
    }
    /**
     * 关联PurchaseHistory表一对多
     * @return \yii\db\ActiveQuery
     */
    public  function  getPurchaseHistory()
    {
        return $this->hasMany(PurchaseHistory::className(),['sku'=>'sku']);
    }

    /**
     * 关联Product表一对一
     * @return \yii\db\ActiveQuery
     */
    public function getProduct(){
        return $this->hasOne(Product::className(),['sku'=>'sku']);
    }

    /**
     * 采购审核通过后，修改采购建议处理状态为：已完成
     * @param $data
     * @return bool
     */
    public function updateState($data)
    {
        foreach ($data as $v)
        {
            $model = self::findOne(['sku' =>$v['sku'],'supplier_code'=>$v['supplier_code'],'state'=>1]);
            if (empty($model)) {
                $status = false;
            } else {
                $model->state = 2;

                //表修改日志-更新
                $change_content = TablesChangeLog::updateCompare($model->attributes, $model->oldAttributes);
                $change_data = [
                    'table_name' => 'pur_purchase_suggest', //变动的表名称
                    'change_type' => '2', //变动类型(1insert，2update，3delete)
                    'change_content' => $change_content, //变更内容
                ];
                TablesChangeLog::addLog($change_data);
                $status = $model->save(false);
            }
        }
        return $status;
    }

    public static function changeBuyer($changeData,$buyer){
        $tran =Yii::$app->db->beginTransaction();
        try{
            foreach ($changeData as $v){
                $updateNum = self::updateAll(['is_change'=>1,'buyer'=>$buyer],
                    'is_purchase=:is_purchase and qty>:qty and purchase_type=:purchase_type and warehouse_code =:warehouse_code and supplier_code =:supplier_code and buyer=:buyer',
                    [':is_purchase'=>'Y',':qty'=>0,':purchase_type'=>4,':warehouse_code'=>$v['warehouse_code'],':supplier_code'=>$v['supplier'],':buyer'=>$v['buyer']]);
                if($updateNum!= $v['num']){
                    throw new Exception('更新数据发送变化');
                }
                $supplierCode[]=$v['supplier'];
            }
            if(!empty($supplierCode)){
                foreach (array_unique($supplierCode) as $supplier_code){
                    SupplierBuyer::updateAll(['status'=>0],['supplier_code'=>$supplier_code,'type'=>2]);
                    $model = new SupplierBuyer();
                    $model->supplier_code = $supplier_code;
                    $model->type          = 2;
                    $model->buyer         = $buyer;
                    $model->status        = 1;
                    $model->supplier_name = SupplierServices::getSupplierName($supplier_code);
                    $model->save();
                }
            }
            $tran->commit();
            $response = ['status'=>'success','message'=>'更新成功'];
        }catch (Exception $e){
            $tran->rollBack();
            $response = ['status'=>'error','message'=>$e->getMessage()];
        }
        return $response;
    }

}
